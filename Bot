import time import ccxt import json import logging from decimal import Decimal

Load API keys (to be added securely later)

api_key = "YOUR_API_KEY" api_secret = "YOUR_API_SECRET"

Initialize Crypto.com Exchange

exchange = ccxt.crypto_com({ 'apiKey': api_key, 'secret': api_secret, 'enableRateLimit': True, })

Configurable trading parameters

BASE_CURRENCY = 'USD' TRIANGLE_PAIRS = [('SHIB/BTC', 'BTC/USD', 'SHIB/USD')] PROFIT_THRESHOLD = Decimal('0.01')  # 1% profit after fees TRADE_AMOUNT = Decimal('100')  # Default trade amount (adjustable)

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

def get_order_book(pair): """Fetch order book data for a given pair.""" try: return exchange.fetch_order_book(pair) except Exception as e: logging.error(f"Error fetching order book for {pair}: {e}") return None

def calculate_triangular_arbitrage(): """Check for profitable arbitrage opportunities.""" for pair1, pair2, pair3 in TRIANGLE_PAIRS: try: ob1, ob2, ob3 = get_order_book(pair1), get_order_book(pair2), get_order_book(pair3) if None in (ob1, ob2, ob3): continue

# Extract best bid/ask prices
        ask1, bid1 = Decimal(ob1['asks'][0][0]), Decimal(ob1['bids'][0][0])
        ask2, bid2 = Decimal(ob2['asks'][0][0]), Decimal(ob2['bids'][0][0])
        ask3, bid3 = Decimal(ob3['asks'][0][0]), Decimal(ob3['bids'][0][0])

        # Compute possible arbitrage profits
        start_amount = TRADE_AMOUNT
        step1 = start_amount / ask1
        step2 = step1 / ask2
        final_amount = step2 * bid3

        profit_percentage = ((final_amount - start_amount) / start_amount) * 100

        if profit_percentage >= PROFIT_THRESHOLD * 100:
            logging.info(f"Arbitrage Opportunity Found! Profit: {profit_percentage:.2f}%")
            execute_trades(pair1, pair2, pair3, start_amount, ask1, ask2, bid3)
        else:
            logging.info("No profitable opportunity detected.")
    except Exception as e:
        logging.error(f"Error in arbitrage calculation: {e}")

def execute_trades(pair1, pair2, pair3, amount, ask1, ask2, bid3): """Execute arbitrage trades sequentially.""" try: logging.info(f"Executing trades: {pair1}, {pair2}, {pair3}") order1 = exchange.create_order(pair1, 'market', 'buy', amount / ask1) order2 = exchange.create_order(pair2, 'market', 'buy', order1['filled'] / ask2) order3 = exchange.create_order(pair3, 'market', 'sell', order2['filled']) logging.info(f"Trades completed successfully.") except Exception as e: logging.error(f"Trade execution failed: {e}")

def main(): """Continuously scan for arbitrage opportunities.""" while True: calculate_triangular_arbitrage() time.sleep(0.5)  # Adjust delay for optimal performance

if name == "main": main()

